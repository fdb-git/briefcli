#!/bin/bash

# Brief (Bash) CLI builder

# Copyright 2020 Fabio Di Bernardini

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

declare -A CONF # Associative array with all config parameters

# Compute SCRIPT_HOME
_source="${BASH_SOURCE[0]}"
while [ -h "$_source" ]; do # resolve $_source until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$_source" )" >/dev/null 2>&1 && pwd )"
    _source="$(readlink "$_source")"
    [[ $_source != /* ]] && _source="$DIR/$_source" # if $_source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
export SCRIPT_HOME="$( cd -P "$( dirname "$_source" )" >/dev/null 2>&1 && pwd )"

# The briefcli command name
export BRIEFCLI=$(basename $0)

# If CONF_PATH is not defined set default
[ -z ${CONF_PATH+x} ] && CONF_PATH=$SCRIPT_HOME/config

# If COMMANDS_PATH is not defined set default
[ -z ${COMMANDS_PATH+x} ] && COMMANDS_PATH=$SCRIPT_HOME/commands

# If no config file, copy the template
[ -f "$CONF_PATH" ] || cp "$SCRIPT_HOME/config.template" "$CONF_PATH"

# If no command directory, copy the template
[ -d "$COMMANDS_PATH" ] || cp -a "$SCRIPT_HOME/commands.template" "$COMMANDS_PATH"
 
function _help_help { _usage 'Print information about the "help" command.' ; }
function help {
    if [ $# -gt 0 ]; then

        command=$1

        # If command begin with "_" print error and return
        [[ "$command" =~ ^\s*_.* ]] && _usage "ERROR: the command cannot begin with _" && return

        # If command is a builtin exec local help function
        if _contains "$(_builtin_commands)" $command; then
            _help_$command
        else # load command and execute its help function
            if [ -f "$COMMANDS_PATH/$command" ]; then
                source "$COMMANDS_PATH/$command"
                usage # _usage "$(usage)"
            else
                _usage "ERROR: $command command not found"
            fi
        fi
    else
        _usage
    fi
}

function _usage {

    message=$1

    # If message is not empty append a newline
    [ -n "$message" ] && message="${message}"$'\n\n---\n'

    echo -e "$message${CONF[USAGE]}

Available commands are:
    $(echo -e "$(_builtin_commands)\n$(_pluggable_commands)" | sort  | tr '\n' ' ')"
}

function _contains {
    arr=($1)
    elem=$2
    for e in ${arr[@]}; do
        if [[ $e == "$elem" ]]; then
            return 0
        fi
    done
    return 1
}

function _builtin_commands {
    declare -F | cut -d ' ' -f 3 | grep -v '^_'
}

function _pluggable_commands {
    ls "$COMMANDS_PATH" | grep -v '^_'
}

function _help_print-conf { _usage 'Print configuration values.' ; }
function print-conf {
    # Print CONF key-values
    for i in "${!CONF[@]}"; do
        echo "CONF[$i]=${CONF[$i]}"
    done
}

function _configfile_conditioning {
    # Convert multiline bash statements in single line, perform
    # parameter substitution, expansion, remove comments and
    # escapes strings.
    # The parameter is a bash file with only variable associations
    # Don't use with other statements
    bash -x $1 2>&1 1>/dev/null | sed 's/^+ //'
}

function _make_conf {
    # Build the CONF associative array with the following override order:
    # - config file
    # - environment variables (removing the initial string defined in ENVPREFIX") 
    # - command line parameters
    # - standard input

    local line

    # Load key-value pairs from config file
    while IFS= read -r line; do
        local key=$(awk -F'=' '{ st = index($0,"=");print $1}' <<< $line)
        local value=$((awk -F: '{ st = index($0,"=");print substr($0,st+1)}' | xargs) <<< $line)
        CONF[$key]=$value
    done <<< "$(_configfile_conditioning $CONF_PATH)"

    # Load environment variables beginning with value defined in ENVPREFIX
    while IFS= read -r line; do
        [ -n "$line" ] && CONF[${line%=*}]=${line#*=}
    done <<< $(env | grep "^${CONF[ENVPREFIX]}" | sed "s/^${CONF[ENVPREFIX]}//")

    # Add command line arguments
    for i in "$@" ; do
        CONF[${i%=*}]=${i#*=}
    done

    # Add key-value pairs from stdin
    if test ! -t 0; then # check if stdin fd is open
        while IFS= read -ru 0 line; do
            CONF[${line%=*}]=${line#*=}
        done
    fi
}

if [ $# -gt 0 ]; then
    CMD=$1
    shift
    _make_conf "$@" # Build the CONF array

    # Exit if command is a "private" function (beginning with _ )
    [[ "$CMD" =~ ^\s*_.* ]] && help $CMD && exit 1

    if declare -F "$CMD" > /dev/null; then # If it is a local function name
        trap help EXIT
        $CMD "$@" # execute command
        trap - EXIT
    else
        if [ -f "$COMMANDS_PATH/$CMD" ]; then
            trap help EXIT
            source "$COMMANDS_PATH/$CMD"   # Load pluggable command
            call  "$@"                      # and call it
            _exit=$?
            trap - EXIT
        else
            help $CMD
        fi
    fi
else
    _usage "ERROR: A command is required"
    exit 1
fi
exit $_exit
